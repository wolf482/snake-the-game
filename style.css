Sonata Workflow Serverless Test Case Agenda
Objective: Validate end-to-end workflow creation and execution in SonataPlatform using serverless logic operators.

1. Environment Setup
1.1 Access Sonata Infrastructure

Verify access to sonatainfranamespace with appropriate permissions

Confirm SonataPlatform CLI/API tools are installed

1.2 Initialize SonataPlatform

bash
sonata-cli platform init --namespace sonatainfranamespace --name test-platform
Verify platform status:

bash
sonata-cli platform status
2. Workflow Creation
2.1 Define Workflow (YAML Example)
Create test-workflow.yaml:

yaml
name: serverless-demo
triggers:
  - type: api
    name: manual-trigger
steps:
  - name: step1
    action: serverless-operator
    inputs:
      function: "example-function"
      payload: {"test": "data"}
2.2 Deploy Workflow

bash
sonata-cli workflow deploy -f test-workflow.yaml
Verify deployment:

bash
sonata-cli workflow list
3. Trigger Workflow via API
3.1 Get Workflow API Endpoint

bash
sonata-cli workflow info serverless-demo --endpoints
3.2 Trigger via cURL

bash
curl -X POST https://<SONATA_API_ENDPOINT>/trigger \
  -H "Authorization: Bearer <TOKEN>" \
  -d '{"workflow": "serverless-demo"}'
Expected Response: 202 Accepted with execution ID.

4. Validation
4.1 Check Execution Logs

bash
sonata-cli workflow logs serverless-demo --execution <ID>
Verify:

Serverless operator invoked

Payload processed correctly

4.2 Cleanup

bash
sonata-cli workflow delete serverless-demo
sonata-cli platform delete test-platform
5. Time Allocation (Estimate)
Task	Duration
Environment Setup	15 min
Workflow Creation	20 min
API Trigger & Validation	15 min
Total	50 min
6. Success Criteria
Workflow deploys without errors

API trigger returns valid execution ID

Serverless operator logs show expected payload processing

Let me know if you'd like to adjust any steps or add specific assertions!
